#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 29 19:26:48 2023

@author: kalyanpediredla
"""
## Importing the necessary libraries to upload the file into database and to access different features.
import pandas as pd
import json as read_json
import time
import random
import hashlib as _hashlib
timestamp = time.time()
timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(timestamp))

#uploading the dataset into the database  and accesing it by assigning it to a variable name called 'df'.
df= pd.read_json("/Users/kalyanpediredla/Downloads/loan_account_statements.json")

chain=[]  ## creating empty chain to append all the account access details as blocks inside the chain.




# TASK A

### Creating a total_accounts function which asks the user if they want to check the total number of loan account holders and give the total count based on their interest.
## in the same function we are using for loop to check whether the keys in the dictionary is identical or not.
def total_accounts():
    A=input("Do you want to check the total number of loan account numbers and Find whether the keys of dictionary are the identical or not identical? (yes/no): \n")
    if A.lower()== "yes":
        print('checking if there any null values in the dataframe:',df.notnull().all())
        print("Task A (Q1):Total Number of Account Holders is :",len(df['Loan Account Number']))
        num_rows, num_cols = df.shape
        keys_identical_for_all_rows_and_columns= True

        for i, j in range (num_rows, num_cols):
            if not df.iloc[i:j].equals(df.iloc[i+1:j+1]):
                keys_identical_for_all_rows_and_columns= False
            break
        if keys_identical_for_all_rows_and_columns:
            print('Task A (Q2): keys are identical in dictionary (df) ')
        else:
            print('Task A (Q2): keys are not identical in dictionary (df) ')
    elif A.lower()== 'no':
        print("Thank you for your choice. please run the total_accounts function and selcet yes, if you want to check the total number of account holders.")
    else:
        print("please select only yes or no")
    



## TASK B

#using sha256 library to create a hash value for the 9th account and 11th account assigning it to different variable names to make comparision.
encoded_block1= str(df[0:8]).encode()
hashvalue1=_hashlib.sha256(encoded_block1).hexdigest()

encoded_block2= str(df[0:8]).encode()
hashvalue2=_hashlib.sha256(encoded_block2).hexdigest()

encoded_block3= str(df[0:10]).encode()
hashvalue3=_hashlib.sha256(encoded_block3).hexdigest()
## creating a hash_comparison function to compare the hashvale1 , hashvalue2 and hashvalue3 with each other.
##using input function to get the confirmation from user whether they are interested in comparision or not.
## using conditional statements if else to make the comaprisions

def Hash_comparison():
    B=input("Do you want to compare hashvalue1 with hashvalue2 and hashvalue3? (yes/no): \n")
    if B.lower()== "yes":
        if hashvalue1 == hashvalue2:
            print('Task B (Q1):hasvalue1 is identical to hasvalue2')
        else:
            print('Task B (Q1):hashvalue1 is not identical to hashvalue2')

    ##Q2
        if hashvalue1 == hashvalue3:
            print('Task B (Q2):hasvalue1 is identical to hasvalue3')
        else:
            print('Task B (Q2):hashvalue1 is not identical to hashvalue3')
    elif B.lower()== 'no':
        print("you have decided not to compare hashvalues")
    else:
        print("please select either yes or no")
            
            
            

## TASK C
## create_block function returns the desired genesis block output in a dictionary datatype.

def create_block():
    x='000'
    encoded_genesisblock= x.encode()
    genesisblock_hashvalue= _hashlib.sha256(encoded_genesisblock).hexdigest()
    block1= {'block_index':1,
                   'Transaction time stamp':timestamp_str,
                   'Transaction data': 'This is the genesis block of account data access transactional record.',
                   'Proof of work':1,
                   'Hash of the previous block':genesisblock_hashvalue}
    return block1



## Task C1.2
#create_chain function takes the Loan Account Number a parameter and runs the creat_block function inside it and append the block values in the chain.

def create_chain():
    chain.append(create_block())
    return chain 




### Task C2
#creating a genesis block using create_block() and create_chain() function. 
## Note: In order to access any account user should know his loan account number.
## we randomly picked one account number from the exsting data. you can choose any account number based on your interest to create a genesis block
def calling_c1():
    genesis_block_creation=input("To create genesis block(Task C2) we should call the Task C1.1 and Task C1.2. Do you wish to create a genesis block? (yes/no): \n")
    if genesis_block_creation.lower()== "yes":
        create_chain()
    elif genesis_block_creation.lower()== 'no':
        print("you have decided not to create a genesis block")
    else:
        print("please select either yes or no")
    print(chain)
    
    
    
    
##Task C3
## mine_block() takes 'Loan Account Number' column from the data frame 'df' and based on the loan account number that we are trying to access it will pick the corresponding loan start date from the data frame.
##Then it creates a block in a dictionary data type with blockindex, transaction time stamp, transaction data, proof of work and hash of the previous block 
## LoanAccount can be referred from data frame.
#Few loan account numbers for testing 295471421,657098312,309613027,224396989,560300386.
#mine_block function can only mine one block at a time. if user wants to mine multiple blocks he should use simulation function.

def mine_block(Loan_Account_Number):
    df[df['Loan Account Number']==Loan_Account_Number]
    try:
        Loan_Start_Date=df.loc[df['Loan Account Number']==Loan_Account_Number,'Loan Start Date'].iloc[0]
    except IndexError:
        return f"Please check the loan account number {Loan_Account_Number} and input the correct one"
    if len(chain)<1:
        genesis_block=create_block()
        chain.append(genesis_block)
        return chain
    else:
        lastblock= str(chain[-1])
        encoded_genesisblock= lastblock.encode()
        lastblock_hashvalue = _hashlib.sha256(encoded_genesisblock).hexdigest()
        block= {'block_index':(len(chain)+1),
                       'Transaction time stamp':timestamp_str,
                       'Transaction data': str(Loan_Account_Number) +', '+(Loan_Start_Date),
                       'Proof of work':random.randint(2000,7000),
                       'Hash of the previous block':lastblock_hashvalue}
    
        return block    

##Task C4
## simulation_1() function picks 120 random loan account numbers and will call the mine_block() fnction with all these 120 loan account numbers.
## once we run the simulation_1() function it will automatically add the created blocks to the existing chain and return the total chain as output.
def simulation_1():
    Random_Loan_Account_Number= random.sample(df['Loan Account Number'].tolist(),120)
    for sample in Random_Loan_Account_Number:
        Simulation1 = mine_block(sample)
        chain.append(Simulation1)
        print(chain)

### TASK C5
##simulation_2() function takes required number of random account access as blocks and latency as parameters and returns the total time taken to access those blocks in the blockchain
def simulation_2(block_count,latency):
    start_time=time.time()
    
    Random_Sample2= random.sample(df['Loan Account Number'].tolist(),block_count)
    for sample in Random_Sample2:
        time.sleep(latency)
        Simulation2 = mine_block(sample)
        chain.append(Simulation2)
        end_time=time.time()
    print ("TASK C5: Total time taken to add these blocks in the blockchain is :",end_time-start_time, 'seconds')
    
## This main_function() calls all the above functions and take the user permission to make it more user friendly and give the desired output.
def main_function():
    total_accounts()
    print()
    Hash_comparison()
    print()
    calling_c1()
    print()
    calling_mine_block=input("Do you wish to mine new blocks? (yes/no): \n")
    if calling_mine_block.lower()== "yes":
        Loan_Account_Number = int(input('Please give your loan account number[eg.627713850]: \n' ))
        output=mine_block(Loan_Account_Number)
        print(output)
    elif calling_mine_block.lower()== 'no':
        print("you have decided not verify mine_block() function")
    else:
        print("please select either yes or no")
        
    print()
    calling_simulation1=input("Do you want to run simulation1 function to randomly access 120 loan accounts and add that to the blockchain? (yes/no): \n")
    if calling_simulation1.lower()== "yes":
        simulation_1()
    elif calling_simulation1.lower()== 'no':
        print("you have decided not to check simulation_1() function.")
    else:
        print("please select either yes or no")
    print()
    calling_simulation2=input(" Do you want to run simulation2 function to randomly access loan accounts with latency and add that to the blockchain? (yes/no): \n")
    if calling_simulation2.lower()== "yes":
        parameter1= int(input("How many accounts do you wish to access? \n"))
        parameter2= int(input("Give the latency in seconds that you wish the simulation to consider while accesing each account? \n"))
        simulation_2(parameter1, parameter2)
    elif calling_simulation2.lower()== 'no':
        print("you have decided not to check simulation_2() function.")
    else:
        print("please select either yes or no")

## main_function() calls all the functions in a single call.
main_function()





    








